.. _api-parts:

Parts
=====

The following classes allow interaction with a vessels individual parts.

.. contents::
   :local:

Parts
-----

.. class:: Parts

   Instances of this class are used to interact with the parts of a vessel. An
   instance can be obtained by calling :attr:`Vessel.parts`.

   .. attribute:: all

      Gets a list of all of the vessels parts.

      :type: ``list`` ( :class:`Part` )

   .. attribute:: root

      Gets the vessels root part.

      :rtype: :class:`Part`

      .. note:: See the discussion on :ref:`api-parts-trees-of-parts`.

   .. attribute:: controlling

      Gets or sets the part from which the vessel is controlled.

      :rtype: :class:`Part`

   .. method:: with_name (name)

      Gets a list of parts whose :attr:`Part.name` is *name*.

      :param string name: The name of the parts
      :rtype: ``list`` ( :class:`Part` )

   .. method:: with_title (title)

      Gets a list of all parts whose :attr:`Part.title` is *title*.

      :param string title: The title of the parts
      :rtype: ``list`` ( :class:`Part` )

   .. method:: with_module (module_name)

      Gets a list of all parts that contain a :class:`Module` whose
      :attr:`Module.name` is *module_name*.

      :param string module_name: The module name
      :rtype: ``list`` ( :class:`Part` )

   .. method:: in_stage (stage)

      Gets a list of all parts that are activated in the given *stage*.

      :param int stage:
      :rtype: ``list`` ( :class:`Part` )

      .. note:: See the discussion on :ref:`api-parts-staging`.

   .. method:: in_decouple_stage (stage)

      Gets a list of all parts that are decoupled in the given *stage*.

      :param int stage:
      :rtype: ``list`` ( :class:`Part` )

      .. note:: See the discussion on :ref:`api-parts-staging`.

   .. method:: modules_with_name (module_name)

      Gets a list of modules (combined across all parts in the vessel) whose
      :attr:`Module.name` is *module_name*.

      :param string module_name:
      :rtype: ``list`` ( :class:`Module` )

   .. attribute:: decouplers

      Gets a list of all decouplers in the vessel.

      :rtype: ``list`` ( :class:`Decoupler` )

   .. attribute:: docking_ports

      Gets a list of all docking ports in the vessel.

      :rtype: ``list`` ( :class:`DockingPort` )

   .. method:: docking_port_with_name (name)

      Gets the first docking port in the vessel with the given port name, as
      returned by :attr:`DockingPort.name`. Returns ``None`` if there are no
      such docking ports.

      :param string name:
      :rtype: :class:`DockingPort`

   .. attribute:: engines

      Gets a list of all engines in the vessel.

      :rtype: ``list`` ( :class:`Engine` )

   .. attribute:: landing_gear

      Gets a list of all landing gear attached to the vessel.

      :rtype: ``list`` ( :class:`LandingGear` )

   .. attribute:: landing_legs

      Gets a list of all landing legs attached to the vessel.

      :rtype: ``list`` ( :class:`LandingLeg` )

   .. attribute:: launch_clamps

      Gets a list of all launch clamps attached to the vessel.

      :rtype: ``list`` ( :class:`LaunchClamp` )

   .. attribute:: lights

      Gets a list of all lights in the vessel.

      :rtype: ``list`` ( :class:`Light` )

   .. attribute:: parachutes

      Gets a list of all parachutes in the vessel.

      :rtype: ``list`` ( :class:`Parachute` )

   .. attribute:: reaction_wheels

      Gets a list of all reaction wheels in the vessel.

      :rtype: ``list`` ( :class:`ReactionWheel` )

   .. attribute:: sensors

      Gets a list of all sensors in the vessel.

      :rtype: ``list`` ( :class:`Sensor` )

   .. attribute:: solar_panels

      Gets a list of all solar panels in the vessel.

      :rtype: ``list`` ( :class:`SolarPanel` )

Part
----

.. class:: Part

   Instances of this class represents a part. A vessel is made of multiple
   parts. Instances can be obtained by various methods in :class:`Parts`.

   .. attribute:: name

      Internal name of the part, as used in `part cfg files
      <http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation>`_. For
      example "Mark1-2Pod".

      :rtype: string

   .. attribute:: title

      Title of the part, as shown when the part is right clicked in-game. For
      example "Mk1-2 Command Pod".

      :rtype: string

   .. attribute:: cost

      Gets the cost of the part, in units of funds.

      :rtype: float

   .. attribute:: vessel

      Gets the vessel that contains this part.

      :rtype: :class:`Vessel`

   .. attribute:: parent

      Gets the parts parent. Returns ``None`` if the part does not have a
      parent. This, in combination with :attr:`Part.children`, can be used to
      traverse the vessels parts tree.

      :rtype: :class:`Part`

      .. note:: See the discussion on :ref:`api-parts-trees-of-parts`.

   .. attribute:: children

      Gets the parts children. Returns an empty list if the part has no
      children. This, in combination with :attr:`Part.parent`, can be used to
      traverse the vessels parts tree.

      :rtype: ``list`` ( :class:`Part` )

      .. note:: See the discussion on :ref:`api-parts-trees-of-parts`.

   .. attribute:: axially_attached

      Gets whether the part is *axially* attached to its parent, i.e. on the top
      or bottom of its parent. If the part has no parent, returns ``False``.

      :rtype: bool

      .. note:: See the discussion on :ref:`api-parts-attachment-modes`.

   .. attribute:: radially_attached

      Gets whether the part is *radially* attached to its parent, i.e. on the
      side of its parent. If the part has no parent, returns ``False``.

      :rtype: bool

      .. note:: See the discussion on :ref:`api-parts-attachment-modes`.

   .. attribute:: stage

      Gets the stage in which this part will be activated. Returns -1 if the
      part is not activated by staging.

      :rtype: int32

      .. note:: See the discussion on :ref:`api-parts-staging`.

   .. attribute:: decouple_stage

      Gets the stage in which this part will be decoupled. Returns -1 if the
      part is never decoupled from the vessel.

      :rtype: int32

      .. note:: See the discussion on :ref:`api-parts-staging`.

   .. attribute:: massless

      Gets whether the part is `"massless"
      <http://wiki.kerbalspaceprogram.com/wiki/Massless_part>`_ -- returning
      ``True`` if it is, ``False`` otherwise.

      :rtype: bool

   .. attribute:: mass

      Gets the current mass of the part, including resources it contains, in
      kilograms. Returns zero if the part is massless.

      :rtype: float

   .. attribute:: dry_mass

      Gets the mass of the part, not including any resources it contains, in
      kilograms. Returns zero if the part is massless.

      :rtype: float

   .. attribute:: impact_tolerance

      Gets the impact tolerance of the part, in meters per second.

      :rtype: float

   .. attribute:: temperature

      Gets the current temperature of the part, in Kelvin.

      :rtype: float

   .. attribute:: max_temperature

      Gets the maximum temperature that the part can survive, in Kelvin.

      :rtype: float

   .. attribute:: resources

      Gets a :class:`Resources` object for the part.

      :rtype: :class:`Resources`

   .. attribute:: crossfeed

      Gets whether this part is crossfeed capable.

      :rtype: bool

   .. attribute:: fuel_lines_from

      Gets the list of parts that are connected to this part via fuel lines,
      where the direction of the fuel line is *into* this part.

      :rtype: bool

      .. note:: See the discussion on :ref:`api-parts-fuel-lines`.

   .. attribute:: fuel_lines_to

      Gets the list of parts that are connected to this part via fuel lines,
      where the direction of the fuel line is *out of* this part.

      :rtype: bool

      .. note:: See the discussion on :ref:`api-parts-fuel-lines`.

   .. attribute:: modules

      Gets the modules for this part.

      :rtype: ``list`` ( :class:`Module` )

   .. attribute:: decoupler

      A :class:`Decoupler` if the part is a decoupler, otherwise ``None``.

      :rtype: :class:`Decoupler`

   .. attribute:: docking_port

      A :class:`DockingPort` if the part is a docking port, otherwise ``None``.

      :rtype: :class:`DockingPort`

   .. attribute:: engine

      An :class:`Engine` if the part is an engine, otherwise ``None``.

      :rtype: :class:`Engine`

   .. attribute:: landing_gear

      A :class:`LandingGear` if the part is landing gear, otherwise ``None``.

      :rtype: :class:`LandingGear`

   .. attribute:: landing_leg

      A :class:`LandingLeg` if the part is a landing leg, otherwise ``None``.

      :rtype: :class:`LandingLeg`

   .. attribute:: launch_clamp

      A :class:`LaunchClamp` if the part is a launch clamp, otherwise ``None``.

      :rtype: :class:`LaunchClamp`

   .. attribute:: light

      A :class:`Light` if the part is a light, otherwise ``None``.

      :rtype: :class:`Light`

   .. attribute:: parachute

      A :class:`Parachute` if the part is a parachute, otherwise ``None``.

      :rtype: :class:`Parachute`

   .. attribute:: reaction_wheel

      A :class:`ReactionWheel` if the part is a reaction wheel, otherwise ``None``.

      :rtype: :class:`ReactionWheel`

   .. attribute:: sensor

      A :class:`Sensor` if the part is a sensor, otherwise ``None``.

      :rtype: :class:`Sensor`

   .. attribute:: solar_panel

      A :class:`SolarPanel` if the part is a solar panel, otherwise ``None``.

      :rtype: :class:`SolarPanel`

   .. method:: position (reference_frame)

      Gets the position of the part in the given reference frame.

      :param ReferenceFrame reference_frame:
      :rtype: :class:`Vector3`

   .. method:: direction (reference_frame)

      Gets the direction of the part in the given reference frame.

      :param ReferenceFrame reference_frame:
      :rtype: :class:`Vector3`

   .. method:: velocity (reference_frame)

      Gets the velocity of the part in the given reference frame.

      :param ReferenceFrame reference_frame:
      :rtype: :class:`Vector3`

   .. method:: rotation (reference_frame)

      Gets the rotation of the part in the given reference frame.

      :param ReferenceFrame reference_frame:
      :rtype: :class:`Quaternion`

   .. attribute:: reference_frame

      Gets the reference frame that is fixed relative to this part.

      * The origin is at the position of the part.

      * The axes rotate with the part.

      * The x, y and z axis directions depend on the design of the part.

      :rtype: :class:`ReferenceFrame`

      .. figure:: /images/reference-frames/part.png
         :align: center

         Mk1 Command Pod reference frame origin and axes

      .. note:: For docking port parts, this reference frame is not necessarily
                equivalent to the reference frame for the docking port, returned
                by :attr:`DockingPort.reference_frame`.

Module
------

.. class:: Module

   In KSP, each part has zero or more `PartModules`_ associated with it. Each
   one contains some of the functionality of the part. For example, an engine has
   a "ModuleEngines" PartModule that contains all the functionality of an
   engine.

   This class allows you to interact with KSPs PartModules, and any PartModules
   that have been added by other mods.

   .. attribute:: name

      Name of the `PartModule`_.
      For example, "ModuleEngines".

      :rtype: string

   .. attribute:: part

      The part that contains this module.

      :rtype: :class:`Part`

   .. attribute:: fields

      The modules field names and their associated values, as a
      dictionary. These are the values visible in the right-click menu of the
      part.

      :rtype: ``dict`` ( string , string )

   .. method:: has_field (name)

      Returns ``True`` if the module has a field with the given name.

      :param string name: name of the field
      :rtype: bool

   .. method:: get_field (name)

      Returns the value of a field.

      :param string name: name of the field
      :rtype: string

   .. attribute:: events

      A list of the names of all of the modules events. Events are the clickable
      buttons visible in the right-click menu of the part.

      :rtype: ``list`` ( string )

   .. method:: has_event (name)

      True if the module has an event with the given name.

      :rtype: bool

   .. method:: trigger_event (name)

      Trigger the named event. Equivalent to clicking the button in the
      right-click menu of the part.

   .. attribute:: actions

      A list of all the names of the modules actions. These are the parts actions that
      can be assigned to action groups in the in-game editor.

      :rtype: ``list`` ( string )

   .. method:: has_action (name)

      True if the part has an action with the given name.

      :rtype: bool

   .. method:: set_action (name, [value=true])

      Set the value of an action with the given name.

Specific Types of Part
----------------------

The following classes provide functionality for specific types of part.

.. contents::
   :local:

Decoupler
^^^^^^^^^

.. class:: Decoupler

   Obtained by calling :attr:`Part.decoupler`.

   .. attribute:: part

      Gets the part object for this decoupler.

      :rtype: :class:`Part`

   .. method:: decouple ()

      Fires the decoupler. Has no effect if the decoupler has already fired.

   .. attribute:: decoupled

      Gets whether the decoupler has fired.

      :rtype: bool

   .. attribute:: impulse

      Gets the impulse, or momentum, that the decoupler imparts when it is
      fired, in Newton seconds.

      :rtype: float

Docking Port
^^^^^^^^^^^^

.. class:: DockingPort

   Obtained by calling :attr:`Part.docking_port`.

   .. attribute:: part

      Gets the part object for this docking port.

      :rtype: :class:`Part`

   .. attribute:: name

      Gets the port name of the docking port. This is the name of the port that
      can be set in the right click menu, when the `Docking Port Alignment
      Indicator`_ mod is installed. If this mod is not installed, returns the
      title of the part (:attr:`Part.title`).

      :rtype: string

   .. attribute:: state

      Gets the current state of the docking port.

      :rtype: :class:`DockingPortState`

   .. attribute:: docked_part

      Gets the part that this docking port is docked to. Returns ``None`` if
      this docking port is not docked to anything.

      :rtype: :class:`Part`

   .. method:: undock ()

      Undocks the docking port and returns the vessel that was undocked
      from.

      Note that after undocking, the active vessel may change
      (:attr:`SpaceCenter.active_vessel`). This method can be called for either
      docking port in a docked pair -- both calls will have the same
      effect. Returns ``None`` if the docking port is not docked to anything.

      :rtype: :class:`Vessel`

   .. attribute:: reengage_distance

      Gets the distance a docking port must move away when it undocks before it
      becomes ready to dock with another port, in meters.

      :rtype: float

   .. attribute:: has_shield

      Gets whether the docking port has a shield.

      :rtype: bool

   .. attribute:: shielded

      Gets or sets the state of the docking ports shield, if it has one.

      Returns ``True`` if the docking port has a shield, and the shield is
      closed. Otherwise returns ``False``. When set to ``True``, the shield is
      closed, and when set to ``False`` the shield is opened. If the docking
      port does not have a shield, setting this attribute has no effect.

   .. method:: position (reference_frame)

      Gets the position of the docking port in the given reference frame.

      :param ReferenceFrame reference_frame:
      :rtype: :class:`Vector3`

   .. method:: direction (reference_frame)

      Gets the direction that docking port points in, in the given reference
      frame.

      :param ReferenceFrame reference_frame:
      :rtype: :class:`Vector3`

   .. method:: rotation (reference_frame)

      Gets the rotation of the docking port, in the given reference frame.

      :param ReferenceFrame reference_frame:
      :rtype: :class:`Quaternion`

   .. attribute:: reference_frame

      Gets the reference frame that is fixed relative to this docking port, and
      oriented with the port.

      * The origin is at the position of the docking port.

      * The axes rotate with the docking port.

      * The x-axis points out to the right side of the docking port.

      * The y-axis points in the direction the docking port is facing.

      * The z-axis points out of the bottom off the docking port.

      :rtype: :class:`ReferenceFrame`

      .. figure:: /images/reference-frames/docking-port.png
         :align: center

         Docking port reference frame origin and axes

      .. figure:: /images/reference-frames/docking-port-inline.png
         :align: center

         Inline docking port reference frame origin and axes

      .. note:: This reference frame is not necessarily equivalent to the
                reference frame for the part, returned by
                :attr:`Part.reference_frame`.

.. class:: DockingPortState

   .. data:: ready

      The docking port is ready to dock to another docking port.

   .. data:: docked

      The docking port is docked to another docking port, or docked to another
      part (from the VAB/SPH).

   .. data:: docking

      The docking port is very close to another docking port, but has not
      docked. It is using magnetic force to acquire a solid dock.

   .. data:: undocking

      The docking port has just been undocked from another docking port, and is
      disabled until it moves away by a sufficient distance
      (:attr:`DockingPort.reengage_distance`).

   .. data:: shielded

      The docking port has a shield, and the shield is closed.

   .. data:: moving

      The docking ports shield is currently opening/closing.

Engine
^^^^^^

.. class:: Engine

   Obtained by calling :attr:`Part.engine`.

   .. attribute:: part

      Gets the part object for this engine.

      :rtype: :class:`Part`

   .. attribute:: active

      Gets or sets whether the engine is active. Setting this attribute may have
      no effect, depending on :attr:`Engine.can_shutdown` and
      :attr:`Engine.can_restart`.

      :rtype: bool

   .. attribute:: thrust

      Gets the current amount of thrust being produced by the engine, in
      Newtons. Returns zero if the engine is not active.

      :rtype: float

   .. attribute:: available_thrust

      Gets the maximum available amount of thrust that can be produced by the
      engine, in Newtons. This takes :attr:`Engine.thrust_limit` into account,
      and is the amount of thrust produced by the engine when activated and the
      main throttle is set to 100%.

      :rtype: float

   .. attribute:: max_thrust

      Gets the maximum amount of thrust that can be produced by the engine, in
      Newtons. This is the amount of thrust produced by the engine when
      activated, :attr:`Engine.thrust_limit` is set to 100% and the main vessel's
      throttle is set to 100%.

      :rtype: float

   .. attribute:: max_vacuum_thrust

      Gets the maximum amount of thrust that can be produced by the engine in a
      vacuum, in Newtons. This is the amount of thrust produced by the engine
      when activated, :attr:`Engine.thrust_limit` is set to 100%, the main
      vessel's throttle is set to 100% and the engine is in a vacuum.

      :rtype: float

   .. attribute:: thrust_limit

      Gets or sets the thrust limiter of the engine. A value between 0
      and 1. Setting this attribute may have no effect, for example the thrust
      limit for a solid rocket booster cannot be changed in flight.

      :rtype: float

   .. attribute:: specific_impulse

      Gets the current specific impulse of the engine, in seconds. Returns zero
      if the engine is not active.

      :rtype: float

   .. attribute:: vacuum_specific_impulse

      Gets the vacuum specific impulse of the engine, in seconds.

      :rtype: float

   .. attribute:: kerbin_sea_level_specific_impulse

      Gets the specific impulse of the engine at sea level on Kerbin, in
      seconds.

      :rtype: float

   .. attribute:: propellants

      Gets the names of resources that the engine consumes.

      :rtype: ``list`` ( string )

   .. attribute:: propellant_ratios

      Gets a dictionary mapping resource names to the ratios at which they are
      consumed by the engine.

      :rtype: ``dict`` ( string, float )

   .. attribute:: has_fuel

      Gets whether the engine has flamed out, i.e. run out of fuel.

      :rtype: bool

   .. attribute:: throttle

      Gets the current throttle setting for the engine. A value between 0
      and 1. This is not necessarily the same as the vessel's main throttle
      setting, as some engines take time to adjust their throttle (such as jet
      engines).

      :rtype: float

   .. attribute:: throttle_locked

      Gets whether the :attr:`Control.throttle` affects the engine. For example,
      this is ``True`` for liquid fueled rockets, and ``False`` for solid rocket
      boosters.

      :rtype: bool

   .. attribute:: can_restart

      Gets whether the engine can be restarted once shutdown. If the engine
      cannot be shutdown, returns ``False``. For example, this is ``True`` for
      liquid fueled rockets and ``False`` for solid rocket boosters.

      :rtype: bool

   .. attribute:: can_shutdown

      Gets whether the engine can be shutdown once activated. For example, this
      is ``True`` for liquid fueled rockets and ``False`` for solid rocket
      boosters.

      :rtype: bool

   .. attribute:: gimballed

      Gets whether the engine nozzle is gimballed, i.e. can provide a turning
      force.

      :rtype: bool

   .. attribute:: gimbal_range

      Gets the range over which the gimbal can move, in degrees.

      :rtype: float

   .. attribute:: gimbal_locked

      Gets or sets whether the engines gimbal is locked in place. Setting this
      attribute has no effect if the engine is not gimballed.

      :rtype: bool

   .. attribute:: gimbal_limit

      Gets or sets the gimbal limiter of the engine. A value between 0
      and 1. Returns 0 if the gimbal is locked or the engine is not
      gimballed. Setting this attribute has no effect if the engine is not
      gimballed.

      :rtype: float

Landing Gear
^^^^^^^^^^^^

.. class:: LandingGear

   Obtained by calling :attr:`Part.landing_gear`.

   .. attribute:: part

      Gets the part object for this landing gear.

      :rtype: :class:`Part`

   .. attribute:: state

      Gets the current state of the landing gear.

      :rtype: :class:`LandingGearState`

   .. attribute:: deployed

      Gets or sets whether the landing gear is deployed.

      :rtype: bool

.. class:: LandingGearState

   .. data:: deployed

   .. data:: retracted

   .. data:: deploying

   .. data:: retracting

Landing Leg
^^^^^^^^^^^

.. class:: LandingLeg

   Obtained by calling :attr:`Part.landing_leg`.

   .. attribute:: part

      Gets the part object for this landing leg.

      :rtype: :class:`Part`

   .. attribute:: state

      Gets the current state of the landing leg.

      :rtype: :class:`LandingLegState`

   .. attribute:: deployed

      Gets or sets whether the landing leg is deployed.

      :rtype: bool

.. class:: LandingLegState

   .. data:: deployed

   .. data:: retracted

   .. data:: deploying

   .. data:: retracting

   .. data:: broken

   .. data:: repairing

Launch Clamp
^^^^^^^^^^^^

.. class:: LaunchClamp

   Obtained by calling :attr:`Part.launch_clamp`.

   .. attribute:: part

      Gets the part object for this launch clamp.

      :rtype: :class:`Part`

   .. method:: release ()

      Releases the docking clamp. Has no effect if the clamp has already been
      released.

Light
^^^^^

.. class:: Light

   Obtained by calling :attr:`Part.light`.

   .. attribute:: part

      Gets the part object for this light.

      :rtype: :class:`Part`

   .. attribute:: active

      Gets or sets whether the light is switched on.

      :rtype: bool

   .. attribute:: power_usage

      Gets the current power usage, in units of charge per second.

      :rtype: float

Parachute
^^^^^^^^^

.. class:: Parachute

   Obtained by calling :attr:`Part.parachute`.

   .. attribute:: part

      Gets the part object for this parachute.

      :rtype: :class:`Part`

   .. method:: deploy ()

      Deploys the parachute. This has no effect if the parachute has already
      been deployed.

   .. attribute:: deployed

      Gets whether the parachute has been deployed.

      :rtype: bool

   .. attribute:: state

      Gets the current state of the parachute.

      :rtype: :class:`ParachuteState`

   .. attribute:: deploy_altitude

      Gets or sets the altitude at which the parachute will full deploy, in
      meters.

      :rtype: float

   .. attribute:: deploy_min_pressure

      Gets or sets the minimum pressure at which the parachute will semi-deploy,
      in atm.

      :rtype: float

.. class:: ParachuteState

   .. attribute:: stowed

      The parachute is safely tucked away inside its housing.

   .. attribute:: active

      The parachute is still stowed, but ready to semi-deploy.

   .. attribute:: semi_deployed

      The parachute has been deployed and is providing some drag, but is not
      fully deployed yet.

   .. attribute:: deployed

      The parachute is fully deployed.

   .. attribute:: cut

      The parachute has been cut.

Reaction Wheel
^^^^^^^^^^^^^^

.. class:: ReactionWheel

   Obtained by calling :attr:`Part.reaction_wheel`.

   .. attribute:: part

      Gets the part object for this reaction wheel.

      :rtype: :class:`Part`

   .. attribute:: active

      Gets or sets whether the reaction wheel is active.

      :rtype: bool

   .. attribute:: broken

      Gets whether the reaction wheel is broken.

      :rtype: bool

   .. attribute:: pitch_torque

      Gets the torque in the pitch axis, in Newton meters.

      :rtype: float

   .. attribute:: yaw_torque

      Gets the torque in the yaw axis, in Newton meters.

      :rtype: float

   .. attribute:: roll_torque

      Gets the torque in the roll axis, in Newton meters.

      :rtype: float

Sensor
^^^^^^

.. class:: Sensor

   Obtained by calling :attr:`Part.sensor`.

   .. attribute:: part

      Gets the part object for this sensor.

      :rtype: :class:`Part`

   .. attribute:: active

      Gets or sets whether the sensor is active.

      :rtype: bool

   .. attribute:: value

      Gets the current value of the sensor.

      :rtype: string

   .. attribute:: power_usage

      Gets the current power usage of the sensor, in units of charge per second.

      :rtype: float

Solar Panel
^^^^^^^^^^^

.. class:: SolarPanel

   Obtained by calling :attr:`Part.solar_panel`.

   .. attribute:: part

      Gets the part object for this solar panel.

      :rtype: :class:`Part`

   .. attribute:: deployed

      Gets or sets whether the solar panel is extended.

      :rtype: bool

   .. attribute:: state

      Gets the current state of the solar panel.

      :rtype: :class:`SolarPanelState`

   .. attribute:: energy_flow

      Gets the current amount of energy being generated by the solar panel, in
      units of charge per second.

      :rtype: float

   .. attribute:: sun_exposure

      Gets the current amount of sunlight that is incident on the solar panel,
      as a percentage. A value between 0 and 1.

      :rtype: float

.. class:: SolarPanelState

   .. data:: extended

   .. data:: retracted

   .. data:: extending

   .. data:: retracting

   .. data:: broken

.. _api-parts-trees-of-parts:

Trees of Parts
--------------

Vessels in KSP are comprised of a number of parts, connected to one another in a
*tree* structure. An example vessel is shown in Figure 1, and the corresponding
tree of parts in Figure 2. The craft file for this example can also be
:download:`downloaded here </crafts/PartsTree.craft>`.

.. figure:: /images/api/parts.png
   :align: left
   :figwidth: 275

   **Figure 1** -- Example parts making up a vessel.

.. figure:: /images/api/parts-tree.png
   :align: right
   :figwidth: 275

   **Figure 2** -- Tree of parts for the vessel in Figure 1. Arrows point from
   the parent part to the child part.

.. container:: clearer

   ..

Traversing the Tree
^^^^^^^^^^^^^^^^^^^

The tree of parts can be traversed using the attributes :attr:`Parts.root`,
:attr:`Part.parent` and :attr:`Part.children`.

The root of the tree is the same as the vessels *root part* (part number 1 in
the example above) and can be obtained by calling :attr:`Parts.root`. A parts
children can be obtained by calling :attr:`Part.children`. If the part does not
have any children, :attr:`Part.children` returns an empty list. A parts parent
can be obtained by calling :attr:`Part.parent`. If the part does not have a
parent (as is the case for the root part), :attr:`Part.parent` returns ``None``.

The following python example uses these attributes to perform a depth-first
traversal over all of the parts in a vessel:

.. code-block:: python

   root = vessel.parts.root
   stack = [(root, 0)]
   while len(stack) > 0:
       part,depth = stack.pop()
       print(' '*depth, part.title)
       for child in part.children:
           stack.append((child, depth+1))

When this code is execute using the craft file for the example vessel pictured
above, the following is printed out::

    Command Pod Mk1
     TR-18A Stack Decoupler
      FL-T400 Fuel Tank
       LV-909 Liquid Fuel Engine
        TR-18A Stack Decoupler
         FL-T800 Fuel Tank
          LV-909 Liquid Fuel Engine
          TT-70 Radial Decoupler
           FL-T400 Fuel Tank
            TT18-A Launch Stability Enhancer
            FTX-2 External Fuel Duct
            LV-909 Liquid Fuel Engine
            Aerodynamic Nose Cone
          TT-70 Radial Decoupler
           FL-T400 Fuel Tank
            TT18-A Launch Stability Enhancer
            FTX-2 External Fuel Duct
            LV-909 Liquid Fuel Engine
            Aerodynamic Nose Cone
       LT-1 Landing Struts
       LT-1 Landing Struts
     Mk16 Parachute

.. _api-parts-attachment-modes:

Attachment Modes
^^^^^^^^^^^^^^^^

Parts can be attached to other parts either *radially* (on the side of the
parent part) or *axially* (on the end of the parent part, to form a stack).

For example, in the vessel pictured above, the parachute (part 2) is *axially*
connected to its parent (the command pod -- part 1), and the landing leg
(part 5) is *radially* connected to its parent (the fuel tank -- part 4).

The root part of a vessel (for example the command pod -- part 1) does not have
a parent part, so does not have an attachment mode. However, the part is
consider to be *axially* attached to nothing.

The following python example does a depth-first traversal as before, but also
prints out the attachment mode used by the part:

.. code-block:: python

   root = vessel.parts.root
   stack = [(root, 0)]
   while len(stack) > 0:
       part,depth = stack.pop()
       if part.axially_attached:
           attach_mode = 'axial'
       else: # radially_attached
           attach_mode = 'radial'
       print(' '*depth, part.title, '-', attach_mode)
       for child in part.children:
           stack.append((child, depth+1))

When this code is execute using the craft file for the example vessel pictured
above, the following is printed out::

 Command Pod Mk1 - axial
  TR-18A Stack Decoupler - axial
   FL-T400 Fuel Tank - axial
    LV-909 Liquid Fuel Engine - axial
     TR-18A Stack Decoupler - axial
      FL-T800 Fuel Tank - axial
       LV-909 Liquid Fuel Engine - axial
       TT-70 Radial Decoupler - radial
        FL-T400 Fuel Tank - radial
         TT18-A Launch Stability Enhancer - radial
         FTX-2 External Fuel Duct - radial
         LV-909 Liquid Fuel Engine - axial
         Aerodynamic Nose Cone - axial
       TT-70 Radial Decoupler - radial
        FL-T400 Fuel Tank - radial
         TT18-A Launch Stability Enhancer - radial
         FTX-2 External Fuel Duct - radial
         LV-909 Liquid Fuel Engine - axial
         Aerodynamic Nose Cone - axial
    LT-1 Landing Struts - radial
    LT-1 Landing Struts - radial
  Mk16 Parachute - axial

.. _api-parts-fuel-lines:

Fuel Lines
----------

.. figure:: /images/api/parts-fuel-lines.png
   :align: right
   :figwidth: 200

   **Figure 5** -- Fuel lines from the example in Figure 1. Fuel flows from the
   parts highlighted in green, into the part highlighted in blue.

.. figure:: /images/api/parts-fuel-lines-tree.png
   :align: right
   :figwidth: 200

   **Figure 4** -- A subset of the parts tree from Figure 2 above.

Fuel lines are considered parts, and are included in the parts tree (for
example, as pictured in Figure 4). However, the parts tree does not contain
information about which parts fuel lines connect to. The parent part of a fuel
line is the part from which it will take fuel (as shown in Figure 4) however the
part that it will send fuel to is not represented in the parts tree.

Figure 5 shows the fuel lines from the example vessel pictured earlier. Fuel
line part 15 (in red) takes fuel from a fuel tank (part 11 -- in green) and
feeds it into another fuel tank (part 9 -- in blue). The fuel line is therefore
a child of part 11, but its connection to part 9 is not represented in the tree.

The attributes :attr:`Part.fuel_lines_from` and :attr:`Part.fuel_lines_to` can be
used to discover these connections. In the example in Figure 5, when
:attr:`Part.fuel_lines_to` is called on fuel tank part 11, it will return a list
of parts containing just fuel tank part 9 (the blue part). When
:attr:`Part.fuel_lines_from` is called on fuel tank part 9, it will return a list
containing fuel tank parts 11 and 17 (the parts colored green).

.. _api-parts-staging:

Staging
-------

.. figure:: /images/api/parts-staging.png
   :align: right
   :figwidth: 340

   **Figure 6** -- Example vessel from Figure 1 with a staging sequence.

Each part has two staging numbers associated with it: the stage in which the
part is *activated* and the stage in which the part is *decoupled*. These values
can be obtained using :attr:`Part.stage` and :attr:`Part.decouple_stage`
respectively. For parts that are not activated by staging, :attr:`Part.stage`
returns -1. For parts that are never decoupled, :attr:`Part.decouple_stage`
returns a value of -1.

Figure 6 shows an example staging sequence for a vessel. Figure 7 shows the
stages in which each part of the vessel will be *activated*. Figure 8 shows the
stages in which each part of the vessel will be *decoupled*.

.. container:: clearer

   ..

.. figure:: /images/api/parts-staging-activate.png
   :align: left
   :figwidth: 250

   **Figure 7** -- The stage in which each part is *activated*.

.. figure:: /images/api/parts-staging-decouple.png
   :align: right
   :figwidth: 250

   **Figure 8** -- The stage in which each part is *decoupled*.

.. container:: clearer

   ..

.. _PartModule:
   http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation#MODULES>`
.. _PartModules: http://wiki.kerbalspaceprogram.com/wiki/CFG_File_Documentation#MODULES>`
.. _Docking Port Alignment Indicator: http://forum.kerbalspaceprogram.com/threads/43901-0-90-Docking-Port-Alignment-Indicator-%28Version-6-1-Updated-03-07-2015%29
